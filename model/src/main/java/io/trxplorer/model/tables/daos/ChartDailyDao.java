/*
 * This file is generated by jOOQ.
*/
package io.trxplorer.model.tables.daos;


import io.trxplorer.model.tables.ChartDaily;
import io.trxplorer.model.tables.records.ChartDailyRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChartDailyDao extends DAOImpl<ChartDailyRecord, io.trxplorer.model.tables.pojos.ChartDaily, ULong> {

    /**
     * Create a new ChartDailyDao without any configuration
     */
    public ChartDailyDao() {
        super(ChartDaily.CHART_DAILY, io.trxplorer.model.tables.pojos.ChartDaily.class);
    }

    /**
     * Create a new ChartDailyDao with an attached configuration
     */
    public ChartDailyDao(Configuration configuration) {
        super(ChartDaily.CHART_DAILY, io.trxplorer.model.tables.pojos.ChartDaily.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected ULong getId(io.trxplorer.model.tables.pojos.ChartDaily object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchById(ULong... values) {
        return fetch(ChartDaily.CHART_DAILY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.trxplorer.model.tables.pojos.ChartDaily fetchOneById(ULong value) {
        return fetchOne(ChartDaily.CHART_DAILY.ID, value);
    }

    /**
     * Fetch records that have <code>day IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByDay(UShort... values) {
        return fetch(ChartDaily.CHART_DAILY.DAY, values);
    }

    /**
     * Fetch records that have <code>month IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByMonth(UShort... values) {
        return fetch(ChartDaily.CHART_DAILY.MONTH, values);
    }

    /**
     * Fetch records that have <code>year IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByYear(UShort... values) {
        return fetch(ChartDaily.CHART_DAILY.YEAR, values);
    }

    /**
     * Fetch records that have <code>total_tx IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByTotalTx(UInteger... values) {
        return fetch(ChartDaily.CHART_DAILY.TOTAL_TX, values);
    }

    /**
     * Fetch records that have <code>total_block IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByTotalBlock(UInteger... values) {
        return fetch(ChartDaily.CHART_DAILY.TOTAL_BLOCK, values);
    }

    /**
     * Fetch records that have <code>avg_block_size IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByAvgBlockSize(UInteger... values) {
        return fetch(ChartDaily.CHART_DAILY.AVG_BLOCK_SIZE, values);
    }

    /**
     * Fetch records that have <code>avg_block_time IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByAvgBlockTime(UInteger... values) {
        return fetch(ChartDaily.CHART_DAILY.AVG_BLOCK_TIME, values);
    }

    /**
     * Fetch records that have <code>avg_tx_count IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByAvgTxCount(UInteger... values) {
        return fetch(ChartDaily.CHART_DAILY.AVG_TX_COUNT, values);
    }

    /**
     * Fetch records that have <code>avg_tx_per_second IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.ChartDaily> fetchByAvgTxPerSecond(Double... values) {
        return fetch(ChartDaily.CHART_DAILY.AVG_TX_PER_SECOND, values);
    }
}
