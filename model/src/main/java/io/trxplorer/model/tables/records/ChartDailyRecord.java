/*
 * This file is generated by jOOQ.
*/
package io.trxplorer.model.tables.records;


import io.trxplorer.model.tables.ChartDaily;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChartDailyRecord extends UpdatableRecordImpl<ChartDailyRecord> implements Record10<ULong, UShort, UShort, UShort, UInteger, UInteger, UInteger, UInteger, UInteger, Double> {

    private static final long serialVersionUID = 1853766804;

    /**
     * Setter for <code>tmp.chart_daily.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>tmp.chart_daily.day</code>.
     */
    public void setDay(UShort value) {
        set(1, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.day</code>.
     */
    public UShort getDay() {
        return (UShort) get(1);
    }

    /**
     * Setter for <code>tmp.chart_daily.month</code>.
     */
    public void setMonth(UShort value) {
        set(2, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.month</code>.
     */
    public UShort getMonth() {
        return (UShort) get(2);
    }

    /**
     * Setter for <code>tmp.chart_daily.year</code>.
     */
    public void setYear(UShort value) {
        set(3, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.year</code>.
     */
    public UShort getYear() {
        return (UShort) get(3);
    }

    /**
     * Setter for <code>tmp.chart_daily.total_tx</code>.
     */
    public void setTotalTx(UInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.total_tx</code>.
     */
    public UInteger getTotalTx() {
        return (UInteger) get(4);
    }

    /**
     * Setter for <code>tmp.chart_daily.total_block</code>.
     */
    public void setTotalBlock(UInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.total_block</code>.
     */
    public UInteger getTotalBlock() {
        return (UInteger) get(5);
    }

    /**
     * Setter for <code>tmp.chart_daily.avg_block_size</code>.
     */
    public void setAvgBlockSize(UInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.avg_block_size</code>.
     */
    public UInteger getAvgBlockSize() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>tmp.chart_daily.avg_block_time</code>.
     */
    public void setAvgBlockTime(UInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.avg_block_time</code>.
     */
    public UInteger getAvgBlockTime() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>tmp.chart_daily.avg_tx_count</code>.
     */
    public void setAvgTxCount(UInteger value) {
        set(8, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.avg_tx_count</code>.
     */
    public UInteger getAvgTxCount() {
        return (UInteger) get(8);
    }

    /**
     * Setter for <code>tmp.chart_daily.avg_tx_per_second</code>.
     */
    public void setAvgTxPerSecond(Double value) {
        set(9, value);
    }

    /**
     * Getter for <code>tmp.chart_daily.avg_tx_per_second</code>.
     */
    public Double getAvgTxPerSecond() {
        return (Double) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<ULong, UShort, UShort, UShort, UInteger, UInteger, UInteger, UInteger, UInteger, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<ULong, UShort, UShort, UShort, UInteger, UInteger, UInteger, UInteger, UInteger, Double> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return ChartDaily.CHART_DAILY.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UShort> field2() {
        return ChartDaily.CHART_DAILY.DAY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UShort> field3() {
        return ChartDaily.CHART_DAILY.MONTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UShort> field4() {
        return ChartDaily.CHART_DAILY.YEAR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field5() {
        return ChartDaily.CHART_DAILY.TOTAL_TX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field6() {
        return ChartDaily.CHART_DAILY.TOTAL_BLOCK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field7() {
        return ChartDaily.CHART_DAILY.AVG_BLOCK_SIZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field8() {
        return ChartDaily.CHART_DAILY.AVG_BLOCK_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field9() {
        return ChartDaily.CHART_DAILY.AVG_TX_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field10() {
        return ChartDaily.CHART_DAILY.AVG_TX_PER_SECOND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort value2() {
        return getDay();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort value3() {
        return getMonth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort value4() {
        return getYear();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value5() {
        return getTotalTx();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value6() {
        return getTotalBlock();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value7() {
        return getAvgBlockSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value8() {
        return getAvgBlockTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value9() {
        return getAvgTxCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value10() {
        return getAvgTxPerSecond();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value1(ULong value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value2(UShort value) {
        setDay(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value3(UShort value) {
        setMonth(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value4(UShort value) {
        setYear(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value5(UInteger value) {
        setTotalTx(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value6(UInteger value) {
        setTotalBlock(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value7(UInteger value) {
        setAvgBlockSize(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value8(UInteger value) {
        setAvgBlockTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value9(UInteger value) {
        setAvgTxCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord value10(Double value) {
        setAvgTxPerSecond(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChartDailyRecord values(ULong value1, UShort value2, UShort value3, UShort value4, UInteger value5, UInteger value6, UInteger value7, UInteger value8, UInteger value9, Double value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChartDailyRecord
     */
    public ChartDailyRecord() {
        super(ChartDaily.CHART_DAILY);
    }

    /**
     * Create a detached, initialised ChartDailyRecord
     */
    public ChartDailyRecord(ULong id, UShort day, UShort month, UShort year, UInteger totalTx, UInteger totalBlock, UInteger avgBlockSize, UInteger avgBlockTime, UInteger avgTxCount, Double avgTxPerSecond) {
        super(ChartDaily.CHART_DAILY);

        set(0, id);
        set(1, day);
        set(2, month);
        set(3, year);
        set(4, totalTx);
        set(5, totalBlock);
        set(6, avgBlockSize);
        set(7, avgBlockTime);
        set(8, avgTxCount);
        set(9, avgTxPerSecond);
    }
}
