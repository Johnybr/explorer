/*
 * This file is generated by jOOQ.
*/
package io.trxplorer.model.tables.daos;


import io.trxplorer.model.tables.VotingRound;
import io.trxplorer.model.tables.records.VotingRoundRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VotingRoundDao extends DAOImpl<VotingRoundRecord, io.trxplorer.model.tables.pojos.VotingRound, UInteger> {

    /**
     * Create a new VotingRoundDao without any configuration
     */
    public VotingRoundDao() {
        super(VotingRound.VOTING_ROUND, io.trxplorer.model.tables.pojos.VotingRound.class);
    }

    /**
     * Create a new VotingRoundDao with an attached configuration
     */
    public VotingRoundDao(Configuration configuration) {
        super(VotingRound.VOTING_ROUND, io.trxplorer.model.tables.pojos.VotingRound.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UInteger getId(io.trxplorer.model.tables.pojos.VotingRound object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchById(UInteger... values) {
        return fetch(VotingRound.VOTING_ROUND.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.trxplorer.model.tables.pojos.VotingRound fetchOneById(UInteger value) {
        return fetchOne(VotingRound.VOTING_ROUND.ID, value);
    }

    /**
     * Fetch records that have <code>day IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByDay(UInteger... values) {
        return fetch(VotingRound.VOTING_ROUND.DAY, values);
    }

    /**
     * Fetch records that have <code>month IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByMonth(UInteger... values) {
        return fetch(VotingRound.VOTING_ROUND.MONTH, values);
    }

    /**
     * Fetch records that have <code>year IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByYear(UInteger... values) {
        return fetch(VotingRound.VOTING_ROUND.YEAR, values);
    }

    /**
     * Fetch records that have <code>round IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByRound(UInteger... values) {
        return fetch(VotingRound.VOTING_ROUND.ROUND, values);
    }

    /**
     * Fetch records that have <code>start_date IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByStartDate(Timestamp... values) {
        return fetch(VotingRound.VOTING_ROUND.START_DATE, values);
    }

    /**
     * Fetch records that have <code>end_date IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByEndDate(Timestamp... values) {
        return fetch(VotingRound.VOTING_ROUND.END_DATE, values);
    }

    /**
     * Fetch records that have <code>sync_start IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchBySyncStart(Timestamp... values) {
        return fetch(VotingRound.VOTING_ROUND.SYNC_START, values);
    }

    /**
     * Fetch records that have <code>sync_end IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchBySyncEnd(Timestamp... values) {
        return fetch(VotingRound.VOTING_ROUND.SYNC_END, values);
    }

    /**
     * Fetch records that have <code>vote_count IN (values)</code>
     */
    public List<io.trxplorer.model.tables.pojos.VotingRound> fetchByVoteCount(ULong... values) {
        return fetch(VotingRound.VOTING_ROUND.VOTE_COUNT, values);
    }
}
