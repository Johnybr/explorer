/*
 * This file is generated by jOOQ.
*/
package io.trxplorer.model.tables;


import io.trxplorer.model.Keys;
import io.trxplorer.model.Tmp;
import io.trxplorer.model.tables.records.BlockRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Block extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = -883056804;

    /**
     * The reference instance of <code>tmp.block</code>
     */
    public static final Block BLOCK = new Block();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>tmp.block.id</code>.
     */
    public final TableField<BlockRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>tmp.block.num</code>.
     */
    public final TableField<BlockRecord, ULong> NUM = createField("num", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>tmp.block.hash</code>.
     */
    public final TableField<BlockRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>tmp.block.parent_hash</code>.
     */
    public final TableField<BlockRecord, String> PARENT_HASH = createField("parent_hash", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>tmp.block.txTrieRoot</code>.
     */
    public final TableField<BlockRecord, String> TXTRIEROOT = createField("txTrieRoot", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>tmp.block.tx_count</code>.
     */
    public final TableField<BlockRecord, UInteger> TX_COUNT = createField("tx_count", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>tmp.block.timestamp</code>.
     */
    public final TableField<BlockRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>tmp.block.size</code>.
     */
    public final TableField<BlockRecord, UInteger> SIZE = createField("size", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>tmp.block.witness_id</code>.
     */
    public final TableField<BlockRecord, ULong> WITNESS_ID = createField("witness_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>tmp.block.witness_address</code>.
     */
    public final TableField<BlockRecord, String> WITNESS_ADDRESS = createField("witness_address", org.jooq.impl.SQLDataType.VARCHAR.length(164).nullable(false), this, "");

    /**
     * The column <code>tmp.block.block_time</code>.
     */
    public final TableField<BlockRecord, UInteger> BLOCK_TIME = createField("block_time", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>tmp.block.confirmed</code>.
     */
    public final TableField<BlockRecord, Byte> CONFIRMED = createField("confirmed", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>tmp.block</code> table reference
     */
    public Block() {
        this("block", null);
    }

    /**
     * Create an aliased <code>tmp.block</code> table reference
     */
    public Block(String alias) {
        this(alias, BLOCK);
    }

    private Block(String alias, Table<BlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Block(String alias, Table<BlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Tmp.TMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BlockRecord, ULong> getIdentity() {
        return Keys.IDENTITY_BLOCK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.KEY_BLOCK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlockRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockRecord>>asList(Keys.KEY_BLOCK_PRIMARY, Keys.KEY_BLOCK_NUM_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BlockRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlockRecord, ?>>asList(Keys.FK_BLOCK_WITNESS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Block as(String alias) {
        return new Block(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(String name) {
        return new Block(name, null);
    }
}
