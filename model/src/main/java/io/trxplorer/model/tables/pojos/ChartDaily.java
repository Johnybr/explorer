/*
 * This file is generated by jOOQ.
*/
package io.trxplorer.model.tables.pojos;


import java.io.Serializable;

import javax.annotation.Generated;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChartDaily implements Serializable {

    private static final long serialVersionUID = -921659342;

    private ULong    id;
    private UShort   day;
    private UShort   month;
    private UShort   year;
    private UInteger totalTx;
    private UInteger totalBlock;
    private UInteger avgBlockSize;
    private UInteger avgBlockTime;
    private UInteger avgTxCount;
    private Double   avgTxPerSecond;

    public ChartDaily() {}

    public ChartDaily(ChartDaily value) {
        this.id = value.id;
        this.day = value.day;
        this.month = value.month;
        this.year = value.year;
        this.totalTx = value.totalTx;
        this.totalBlock = value.totalBlock;
        this.avgBlockSize = value.avgBlockSize;
        this.avgBlockTime = value.avgBlockTime;
        this.avgTxCount = value.avgTxCount;
        this.avgTxPerSecond = value.avgTxPerSecond;
    }

    public ChartDaily(
        ULong    id,
        UShort   day,
        UShort   month,
        UShort   year,
        UInteger totalTx,
        UInteger totalBlock,
        UInteger avgBlockSize,
        UInteger avgBlockTime,
        UInteger avgTxCount,
        Double   avgTxPerSecond
    ) {
        this.id = id;
        this.day = day;
        this.month = month;
        this.year = year;
        this.totalTx = totalTx;
        this.totalBlock = totalBlock;
        this.avgBlockSize = avgBlockSize;
        this.avgBlockTime = avgBlockTime;
        this.avgTxCount = avgTxCount;
        this.avgTxPerSecond = avgTxPerSecond;
    }

    public ULong getId() {
        return this.id;
    }

    public void setId(ULong id) {
        this.id = id;
    }

    public UShort getDay() {
        return this.day;
    }

    public void setDay(UShort day) {
        this.day = day;
    }

    public UShort getMonth() {
        return this.month;
    }

    public void setMonth(UShort month) {
        this.month = month;
    }

    public UShort getYear() {
        return this.year;
    }

    public void setYear(UShort year) {
        this.year = year;
    }

    public UInteger getTotalTx() {
        return this.totalTx;
    }

    public void setTotalTx(UInteger totalTx) {
        this.totalTx = totalTx;
    }

    public UInteger getTotalBlock() {
        return this.totalBlock;
    }

    public void setTotalBlock(UInteger totalBlock) {
        this.totalBlock = totalBlock;
    }

    public UInteger getAvgBlockSize() {
        return this.avgBlockSize;
    }

    public void setAvgBlockSize(UInteger avgBlockSize) {
        this.avgBlockSize = avgBlockSize;
    }

    public UInteger getAvgBlockTime() {
        return this.avgBlockTime;
    }

    public void setAvgBlockTime(UInteger avgBlockTime) {
        this.avgBlockTime = avgBlockTime;
    }

    public UInteger getAvgTxCount() {
        return this.avgTxCount;
    }

    public void setAvgTxCount(UInteger avgTxCount) {
        this.avgTxCount = avgTxCount;
    }

    public Double getAvgTxPerSecond() {
        return this.avgTxPerSecond;
    }

    public void setAvgTxPerSecond(Double avgTxPerSecond) {
        this.avgTxPerSecond = avgTxPerSecond;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ChartDaily (");

        sb.append(id);
        sb.append(", ").append(day);
        sb.append(", ").append(month);
        sb.append(", ").append(year);
        sb.append(", ").append(totalTx);
        sb.append(", ").append(totalBlock);
        sb.append(", ").append(avgBlockSize);
        sb.append(", ").append(avgBlockTime);
        sb.append(", ").append(avgTxCount);
        sb.append(", ").append(avgTxPerSecond);

        sb.append(")");
        return sb.toString();
    }
}
